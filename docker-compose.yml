services:

  mysql_db1:
    image: mysql:latest
    container_name: mysql_db1
    environment:
      MYSQL_ROOT_PASSWORD: booking-password
      MYSQL_DATABASE: booking_db
    volumes:
      - booking_db_data:/var/lib/mysql
    networks:
      - app-network
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  booking-microservice:
    build:
      context: ./Booking
      dockerfile: Dockerfile
    container_name: booking-microservice
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db1:3306/booking_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=booking-password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8787/eureka/
    depends_on:
      mysql_db1:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8081:8080"

  mysql_db2:
    image: mysql:latest
    container_name: mysql_db2
    environment:
      MYSQL_ROOT_PASSWORD: flight-password
      MYSQL_DATABASE: flight_db
    volumes:
      - flight_db_data:/var/lib/mysql
    networks:
      - app-network
    ports:
      - "3309:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  flight-microservice:
    build:
      context: ./microservicios_flight
      dockerfile: Dockerfile
    container_name: flight-microservice
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db2:3306/flight_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=flight-password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8787/eureka/
    depends_on:
      mysql_db2:
        condition: service_healthy
      eureka-server:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8083:8080"

  eureka-server:
    build:
      context: ./discoverservices
      dockerfile: Dockerfile
    container_name: eureka-server
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
    networks:
      - app-network
    ports:
      - "8787:8787"

networks:
  app-network:
    driver: bridge

volumes:
  booking_db_data:
  flight_db_data:

